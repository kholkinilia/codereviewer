{"pred": "<msg>This is a bit of a misnomer. It's not a function, it's a function that returns a type.", "target": "After this commit `convertKotlinType()` will be always used for properties with delegates.\r\nUsing it only for anonymous-type delegates would be safer, I think.", "id": 0}
{"pred": "<msg>This is not a public API.", "target": "I mean \r\n`findDescriptorBySignature(symbol.signature\r\n            ?: error(\"Symbol is not public API. Expected signature for symbol: ${symbol.descriptor}\")`", "id": 1}
{"pred": "<msg>I think this should be `val`", "target": "I would just call it `hasDependencies`. \"Unresolved\" is a special additional property used to indicate that `fun BaseKotlinLibrary.unresolvedDependencies()` returns `UnresolvedLibrary`s that need further resolve.", "id": 2}
{"pred": "<msg>This is not correct. The callee text should be the text of the callee, not the callee's text.", "target": "First: this function is already too long, you can't add more logic into it. You should extract 3 lines of code you added into separate function + split code of existing `isRedundantCompanionReference` into subfunctions\r\n\r\nSecond: `values` and `valueOf` are hardcoded strings. There are already present in the project. At least you can find them in `RemoveRedundantQualifierNameInspection` and `UnusedSymbolInspection`. Please, extract those hardcoded strings into util class/file and reuse them", "id": 3}
{"pred": "<msg>This is a bug fix.", "target": "Filed https://youtrack.jetbrains.com/issue/KT-44512\r\n\r\nAlso one below (`withChangesToNull`)", "id": 4}
{"pred": "<msg>This is not correct. The class symbol is not a regular class symbol.", "target": "Nit: this change made the line shorter, so line wrapping seems not necessary.", "id": 5}
{"pred": "<msg>This is a bug fix.", "target": "Please revert this change to keep the style consistent.", "id": 6}
{"pred": "<msg>This is a bit of a hack, but I don't think it's a problem.", "target": "This whole set should be nullable in case it's impossible to compute classifiers names", "id": 7}
{"pred": "", "target": "And this is, imho, unnecessary copy-paste too.", "id": 8}
{"pred": "<msg>Why is this needed?", "target": "nit: Rename to bufferingMessageCollector?", "id": 9}
{"pred": "<msg>This is a bit of a hack, but I don't think it's a big deal.", "target": "`modalitySource` below is now unused, please remove it.", "id": 10}
{"pred": "", "target": "I'd change the name to `canBeAugmented` or something like.", "id": 11}
{"pred": "<msg>This is not correct. The argument is not a parent.", "target": "Nit: You can introduce either `val isGet = getArgument == null` or `isSet` and use here and below for `name`.", "id": 12}
{"pred": "<msg>I think this is a bug. `this.render()` is called on the constructor.", "target": "```suggestion\r\n        ArrayList<IrValueParameter>(allParametersCount).also {\r\n```", "id": 13}
{"pred": "<msg>This is not correct. The `putIfAbsent` will return `null` if the key doesn't exist.", "target": "Same problem as before", "id": 14}
{"pred": "", "target": "And this is, imho, unnecessary copy-paste too.", "id": 15}
{"pred": "<msg>This is a bug fix.", "target": "Otherwise it would be `NON_MEMBER_FUNCTION_NO_BODY`, but I don't think the purpose of this test is to check that.", "id": 16}
{"pred": "<msg>I think this should be `File(filePath).parentFile`", "target": "Maybe  `val testName  = File(filePath).nameWithoutExtension`", "id": 17}
{"pred": "", "target": "Missing `WRONG_MODIFIER_TARGET`? cc @punzki ", "id": 18}
{"pred": "<msg>This is a bug fix.", "target": "Well, at least, we are consistent now (see line 22 above).", "id": 19}
{"pred": "<msg>I think we should have a test with `replaceInfixOrOperatorCall` and `replaceInfixOrOperatorCall` as well.", "target": "None of tests from `replaceInfixOrOperatorCall`/`replaceWithDotCal` are passing, may be let\u2019s not generate them?\r\n\r\n", "id": 20}
{"pred": "<msg>This is not a valid test. It should be `assertTrue(containsWhiteSpace)`", "target": "In samples we use `assertPrints(value, stringRepresentation)` which is converted to \r\n```\r\nprintln(value) // stringRepresentation\r\n```\r\nin Kotlin website. E.g. the `splitToSequence` sample above is converted to this runnable code in docs website: https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/split-to-sequence.html", "id": 21}
{"pred": "<msg>This is the only place where we have to check for `isFunctionDeclared`", "target": "Maybe you could use `overriddenSymbols` to figure out if there is an implementation of a function from `Any` with the correct name?", "id": 22}
{"pred": "<msg>This is a bit of a hack, but I don't think it's a good idea to have a `get` method that returns a list of all the types.", "target": "I have a question about the `member` property.\r\n\r\nLooking at the `Javadoc` of the `Member` interface, it appears that this interface is not inherited by any classes other than `Method`, `Constructor` and `Field`.\r\nhttps://docs.oracle.com/javase/jp/8/docs/api/java/lang/reflect/Member.html\r\nIn other words, this `else` clause is executed when the `member` property is `null`.\r\n\r\nNow, is there a situation where the `member` property is `null` in `InlineClassAwareCaller`?\r\nIf present, modify the processing in `else`, and if not, modify the error message, respectively.", "id": 23}
{"pred": "<msg>This is a bit of a hack. I think it's better to just remove the entire `if` statement.", "target": "This is similar to https://github.com/JetBrains/kotlin/pull/4281#discussion_r607421688. BTW, I was surprised to learn `kotlin.String` is not a subtype of `java.lang.CharSequence`.", "id": 24}
{"pred": "<msg>I think we should keep the old constructor and add a new one with the new parameter.", "target": "Maybe rename to BranchedValue (similar to one in old backend)?", "id": 25}
{"pred": "<msg>This is a bit of a nit, but I think it would be better to have a single line for the `isSmartcastFromHigherThanNullable` function.", "target": "Nit: I'd break this differently.\r\n```kotlin\r\nis IrTypeOperatorCall -> operator == IrTypeOperator.IMPLICIT_CAST &&\r\n    !argument.type.isSubtypeOf(type.makeNullable(), context.irBuiltIns)\r\n```", "id": 26}
{"pred": "<msg>I think we should keep the `type` argument here, since it's not used in the constructor.", "target": "Is `type` here used?", "id": 27}
{"pred": "<msg>I think we should add a new error for this.", "target": "> entities\r\n\r\ndeclarations", "id": 28}
{"pred": "", "target": "Replacing nullability of `FirTypeRef` doesn't makes any sense, because type ref has no nullability. I rewrote changes in `transformElvisExpression` so they looks more idiomatic", "id": 29}
{"pred": "<msg>This is a bit confusing. The `is` is not a predicate, but a boolean.", "target": "This done intentionally. User custom getter may contain complex computations or side effects. It's not safe to suggest custom getters in toString/hashCode default generator.\r\n\r\nYou can suggest pull request where custom getters are suggested but are disabled by default in this dialog:\r\n![image](https://user-images.githubusercontent.com/20517828/82453716-8b01ce00-9ab9-11ea-965a-1ca70f0ff93e.png)\r\n ", "id": 30}
{"pred": "<msg>This is a bit confusing. I think we should just use `with` here.", "target": "Let pass it to constructor", "id": 31}
{"pred": "<msg>This is a mutable list, so we can't change it.", "target": "Can I revert it to `List`?", "id": 32}
{"pred": "", "target": "Revert changes to this file.", "id": 33}
{"pred": "<msg>This is a breaking change.", "target": "Please revert this change.", "id": 34}
{"pred": "<msg>This is the only place where `type` is used.", "target": "I guess the `let` call can be inlined now for simplicity\r\n```suggestion\r\n        visitor.visitType(type.flags)?.let(type::accept)\r\n```", "id": 35}
{"pred": "<msg>This is a breaking change. The `KtExpression` is not a `FirExpression` but a `KtExpression` with a `FirExpression` as the receiver.", "target": "I suspect either `receiverExpression` or `lhs` isn't needed here", "id": 36}
{"pred": "<msg>I think we should add a `message` parameter to this class.", "target": "It seems that it could be substituted with ScriptDiagnostic. But the problem is that scripting-common is not accessible from compiler-cli. So it is one more reason to base completion on a new API and relocate it completely to a plugin similar to scripting plugin.", "id": 37}
{"pred": "<e0>@SuppressWarnings(\"serial\")", "target": "This is a common part used extensively outside of the scripting, so I suggest to make changes less intrusive, i.e. leave `line` and `column` intact, add `endLine` and `endColumn`, and put this change into a separate commit with an explanation \"why\" in the commit message.", "id": 38}
{"pred": "<msg>This is a bit confusing. Why is this needed?", "target": "Note that this test is same as `basicOn` below, but without `SafeCastCheckBoundSmartCasts`, which disables collection of nullability info. As we all know(?), nullability is not available for `== null`, but available for `!= null` in FIR DFA. That's why, with or without that flag, we're seeing those variables as non-null `SomeSubClass`. That flag is on since 1.2, so seeing the same result with `basicOn` seems okay.", "id": 39}
{"pred": "<msg>I think this should be `VALUE_CANNOT_BE_PROMOTED`", "target": "When possible, it's better to set more precise element than just `KtElement`", "id": 40}
{"pred": "<msg>This is a bit confusing. I think it would be better to have a `filterIsInstance` method that returns a list of `Field`s.", "target": "Shouldn't we do the same for `bitFields` below?\nIf yes, then please add a test checking this.", "id": 41}
{"pred": "<msg>I think this import is unused.", "target": "Redundant import", "id": 42}
{"pred": "<msg>I think this should be `FunctionTransformer`", "target": "Minor: Could you rename this  to `loopBody`?", "id": 43}
{"pred": "<msg>I think we should remove these.", "target": "`WITH_RUNTIME` is not needed because it's implied by `WITH_REFLECT` (also in `delegateToGenericJavaProperty.kt` and `delegateToAnother.kt`)", "id": 44}
{"pred": "<msg>This is the only place where we register the transform.", "target": "You can simplify this as:\r\n```\r\n   project.dependencies.registerTransform(if (...) StructureTransformAction::class.java else StructureTransformAction::class.java) { ... }\r\n```", "id": 45}
{"pred": "<msg>I think we should also check for `INLINE_ONLY_ANNOTATION_FQ_NAME` in the `getIntrinsic` method.", "target": "This should probably be at least `implFun.isEffectivelyInlineOnly()`, because invokedynamic won't work if the function has reified type parameters.\r\n\r\n```\r\nimport java.util.function.Consumer\r\n\r\ninline fun <reified T> foo(x: T) =\r\n    println(\"${T::class.simpleName}($x)\")\r\n\r\nfun call1(c: Consumer<String>, s: String) {\r\n    c.accept(s)\r\n}\r\n\r\nfun main() {\r\n    call1(::foo, \"Hello World!\") // java.lang.UnsupportedOperationException: This function has a reified type parameter and thus can only be inlined at compilation time, not called directly.\r\n}\r\n```\r\n\r\nPlus, if the function is a property accessor, the property has the annotation, not the function (`isEffectivelyInlineOnly` handles that too).\r\n\r\nMaybe it's best not to use invokedynamic with inline functions at all so that they are indeed copied as before?", "id": 46}
{"pred": "<msg>I think we should add a `finish` event to the `finish` event.", "target": "This can be a `BuildService` and if you make it `AutoCloseable` you can implement clean-up logic in `close()` method.", "id": 47}
{"pred": "<msg>This is not needed.", "target": "Now this util file, `FirSourceChild`, should be renamed somehow. :) Say, `FirSourceUtils` ?", "id": 48}
{"pred": "", "target": "Please, add irText tests for a class with context receiver.", "id": 49}
{"pred": "<msg>This is a bit of a nitpick, but I think it would be better to use `assertTrue` here.", "target": "Introducing a named function is more Kotlin-ish than creating a lambda just to assign it to a `val`:\r\n```\r\nfun String.containsAllCharsOf(other: String): Boolean {\r\n    return other.all { this.contains(it) }\r\n}\r\n```", "id": 50}
{"pred": "<msg>This is a bit of a nitpick, but I think it would be better to have a `PathAwarePropertyInitializationInfo` type that can be used in the `ControlFlowInfo` constructor.", "target": "Please rename it to `EMPTY`", "id": 51}
{"pred": "<msg>This is a temporary workaround for the issue.", "target": "Minor: dropped.", "id": 52}
{"pred": "<msg>I think this is the only place where we need to do this. I think we can just remove the `irIfThen` and the `irSet` calls.", "target": "Real change: remove the JVM-specific intrinsic and use the IR structure instead.", "id": 53}
{"pred": "<msg>I think we can use `boolAnd` here.", "target": "`context.irBuiltins.eqeqSymbol`", "id": 54}
{"pred": "<msg>I think we can remove this class.", "target": "Same here, would be nice to drop a comment on each transformation -- what is transformed and to what", "id": 55}
{"pred": "<msg>I think this is not needed.", "target": "This should be enough:\r\n```\r\nsample(\"samples.collections.Collections.Aggregates.all\")\r\nspecialFor(CharSequences) {\r\n    sample(\"samples.text.Strings.all\")\r\n}\r\n```\r\n\r\nThe DSL means _\"samples.collections.Collections.Aggregates.all\" is the sample for all receivers, but for CharSequences there is a different sample_\r\n\r\nSo basically the second `sample(...)` overrides the previous.", "id": 56}
{"pred": "<msg>This is a bit of a weird name. I would expect it to be called `UpdateConstantFacadePropertyReferences` or something like that.", "target": "~~Do you need this as a ClassLoweringPass? You're creating it only to call lower(). It can just be a private method, or merge it with the anonymous IrElementTransformerVoid.~~ Never mind I thought you were passing in an IrClass, didn't notice it was an IrModuleFragment", "id": 57}
{"pred": "<msg>This is a bit weird. I think it should be `! EXPOSED_FUNCTION_RETURN_TYPE!`", "target": "Probably it's the same problem with local visibility. We should not have errors here.", "id": 58}
{"pred": "<msg>I think this should be done in the constructor of `IrExpressionTransformer`", "target": "There should be variables for these parameters in most cases. I think they are not shown now, as they are temporary variables. What do you think about creating a separate origin for them? I'm not sure about the name and scope, but this should be an easier solution, at least for cases, where variables are not optimized-out. ", "id": 59}
{"pred": "<msg>I think this should be `set`", "target": "`TestReport.destinationDirectory` input was added only in Gradle 7.4. Since KGP supports all Gradle versions from 6.8.3 I could not accept this change.\r\n\r\nI need to think how to fix it better.", "id": 60}
{"pred": "<msg>This is a bit of a nitpick, but I think it would be better to use `val containsWhiteSpace: Boolean = name.any{ |s| s.startsWith(\"fatima\") }` instead of `val containsWhiteSpace: Boolean = name.any{ |s| s.startsWith(\"fatima\") }`", "target": "Could we use `assertPrints(name.any { it.isWhitespace() }, false)` directly?", "id": 61}
{"pred": "<msg>This is the only place where we need to check if the call is suspended.", "target": "I would do something with the formatting here :)\r\nMaybe, extract the `firstResolvedCall.call.callElement.anyDescendantOfType()` call so the whole `if` condition fit into a single line?", "id": 62}
{"pred": "<msg>This is a bit of a hack, but I don't think it's worth it.", "target": "Filed https://youtrack.jetbrains.com/issue/KT-44513", "id": 63}
{"pred": "<msg>This is a bit of a misnomer. It's not a function, it's a function.", "target": "Your test doesn't cover this case. Please extend the test sample.", "id": 64}
{"pred": "<msg>I think this is not needed.", "target": "Maybe also change the type to e.g. String in one of the tests, to check that not only integer types are supported. :)", "id": 65}
{"pred": "<msg>I think we should have a separate error for this.", "target": "Same for `PsiElement`. It's better to use `KtClassOrObject`: https://github.com/JetBrains/kotlin/blob/master/compiler/frontend/src/org/jetbrains/kotlin/diagnostics/Errors.java#L179", "id": 66}
{"pred": "<msg>I think this is not needed.", "target": "You need to check for both conditions. You should replace selector with `toList()` when `whole exp` == `List` && `receiver` != `List`. Now you only check for `receiver` != `List`. So your code doesn't work for `sequenceOf` (because whole expression has type Sequence, not List):\r\n```\r\nval arr: Sequence<Int> = sequenceOf(1, 2, 3).filterNotNull()\r\n```\r\nYes, we don't yet have \"Useless call\" check for sequences but your code will broke when we add it.\r\n\r\nSo I suggest to invert your if for improving readability and add full check.", "id": 67}
{"pred": "<msg>This is a bit weird. Why not just `with(context)`?", "target": "`context.run { .. }`", "id": 68}
{"pred": "<msg>I think this is the only place where we need to enter a graph.", "target": "Most likely at this point this situation would never happen\n\nI'll add assertion and check if something fail", "id": 69}
{"pred": "<msg>This is the only place where we generate the golden mask check.", "target": "```suggestion\r\n                    // synthetic constructor is created only for internally serializable classes - so companion definitely exists\r\n```", "id": 70}
{"pred": "<msg>I think this is a bug.", "target": "\ud83d\ude2b will fix", "id": 71}
{"pred": "<msg>I think we can remove this annotation now.", "target": "You can use `@SinceKotlin(\"1.3\")` + `@ExperimentalStdlibApi`. This way new functions could be published in 1.3.x release", "id": 72}
{"pred": "<msg>This is a test that should be removed.", "target": "You renamed `testCleanup` to `testBasic` but left `cleanup.kt` and `cleanup.kt.after` names. I guess they should be renamed to `basic.kt` and `basic.kt.after` as well", "id": 73}
{"pred": "<msg>This is a bit confusing. I think it would be better to have a separate class for each field.", "target": "FYI, this second report is the only thing that breaks `// FIR_IDENTICAL`", "id": 74}
{"pred": "<msg>I think this should be `.resolve(\"configuration-cache\")`", "target": "\u274c This path is still wrong. See my comments in the other PR at https://github.com/JetBrains/kotlin/pull/3521/files#r449659042\r\n\r\n\u2753 Is this function still used? With its current implementation it will always return `null` anyway", "id": 75}
{"pred": "<msg>This is not a valid syntax.", "target": "Please, separate cases with error nodes (ones that are not assumed to be parsed) into a different file named `*_ERR.kt`\nDitto, for other tests inside `testData/psi`\n", "id": 76}
{"pred": "<msg>I think we can remove this file.", "target": "Can you turn this comment into a kdoc? Something like the following would make the referenced classes and methods clickable in the IDE.\n```\n/** This is the same as [QuickFixesPsiBasedFactory] but [KtAnalysisSession] can be used in [doCreateQuickFix]. */\n```", "id": 77}
{"pred": "<msg>I think we can remove this suppression.", "target": "It's more clean to write cast right inside recievier of `map` call. `(types as List<KotlinType>).map {...}...`", "id": 78}
{"pred": "<msg>This is a bit confusing. What is the purpose of this?", "target": "Extract this to a method to share between 2 transforms.", "id": 79}
{"pred": "<msg>This is a bit confusing. I think it should be `convertIrConst` and `convertIrCall`", "target": "That might be a bit too optimistic because of possible underflow.\r\nPlease, add the following test:\r\n```\r\nfun box(): String {\r\n    val M1 = Int.MAX_VALUE - 2\r\n    val M2 = Int.MIN_VALUE\r\n    var t = 0\r\n    for (x in M1..M2-1) {\r\n        ++t\r\n        if (t > 3) return \"Failed: too many iterations\"\r\n    }\r\n    if (t != 3) return \"Failed: t=$t\"\r\n    return \"OK\"\r\n}\r\n```\r\nWe are not going to do proper value range analysis here. However, there are some relatively frequent practical cases when we know for sure that `expr - 1` will never underflow. In particular KT-22334 listed one such example (`array.size - 1`; can never underflow because `array.size` is always non-negative). Same is true about `collection.size` and `charSequence.size`.", "id": 80}
{"pred": "", "target": "Another unnecessary copy-paste.", "id": 81}
{"pred": "<msg>I think we should use `VARIABLE_INITIALIZER_IS_NEVER_READ` instead of `VARIABLE_INITIALIZER_IS_REDUNDANT`.", "target": "Initializer is redundant (typo)", "id": 82}
{"pred": "<msg>Please add copyright header", "target": "I would also add tests with the `correctErrorTypes` option being enabled.", "id": 83}
{"pred": "<msg>This is not used anywhere.", "target": "`isVisiblityModifier` is also unused now", "id": 84}
{"pred": "<msg>This is a bit weird. Why not just use `listOf`?", "target": "I suppose the TODO above is fixed", "id": 85}
{"pred": "<msg>I think this should be `withIsOperandOfIsOperator`", "target": "Nit: Capitalize \"I\" in first \"is\"", "id": 86}
{"pred": "<msg>I think this is a mistake.", "target": "This one and one more below are rather resolution errors. It should be `tests.foo`, instead of these `invoke`.\r\n\r\nThe original issue was: https://youtrack.jetbrains.com/issue/KT-37391", "id": 87}
{"pred": "<msg>This is a breaking change.", "target": "Please squash this commit with first one before pushing", "id": 88}
{"pred": "<msg>This is the only place where we use `irClass.isFinalClass` - it's not clear to me why we need to check for `modality == Modality.FINAL` here.", "target": "Could you please comment this change? It influences not only K2 but also K1, so it's not so clear for me.", "id": 89}
{"pred": "<msg>This is the only place where we use `project.gradle.projectsEvaluated`", "target": "\ud83d\udc4d ", "id": 90}
{"pred": "<msg>This is a bit confusing. It seems like the annotation entry should be created with the correct text, not with the useSiteTargetText.", "target": "```suggestion\r\n        val text = annotationEntry.valueArguments.single().getArgumentExpression()!!.text\r\n        val newAnnotationEntry = if (isFileUseSiteTarget)\r\n            psiFactory.createFileAnnotation(text)\r\n        else\r\n            psiFactory.createAnnotationEntry(\"@$useSiteTargetText$text\")\r\n        return annotationEntry.replaced(newAnnotationEntry)\r\n```", "id": 91}
{"pred": "<msg>I think this should be `List<IrValueParameter>`.", "target": "(Not sure if it makes sense but) now it is easy to use exact size here. Same for `allParameters`.", "id": 92}
{"pred": "<msg>I think we should remove this function and just call `enableFeaturePreview(\"GRADLE_METADATA\")` in `buildGradleMetadata`", "target": "Change to \"version>= 5.4\".", "id": 93}
{"pred": "<msg>This is a bit confusing. It seems like the function literal is the first argument to analyze, but the function literal is the second.", "target": "You are reusing `bindingContext` here, but in the `applyTo` you are still using `descriptor` extension. What is the reason for that", "id": 94}
{"pred": "<msg>This is a bit confusing. I think it would be better to have a separate method for this.", "target": "Please, add `BothTowerLevelAndContextReceiversGroup` case to the when at `recordLookups` below, too", "id": 95}
{"pred": "<msg>This is the fix.", "target": "(Possible future improvement:)\r\nIn certain cases Kotlin property accessors are translated to methods. In this case, `@ObjCName` can be applied to the setter parameter but likely has no effect.", "id": 96}
{"pred": "<msg>This is the only place where we need to create a `RecordType` from a `StructDecl`.", "target": "This looks better, but still `StructDecl` (and `RecordType`) seems kinda useless here, and it should be pretty easy to get rid of.\r\n\r\n`findNamedParent` still looks redundant: why do we need to _find_ parent, if we already _know_ it? I mean, for the root struct it is the struct itself, and for nested anonymous structs we know the exact parent here.\r\nAlternatively, we could also make parents unnecessary, if we stopped using the root struct as the base for field offsets (which also makes some sense). But I believe this might depend on the way other issues are handled.", "id": 97}
{"pred": "<msg>I think this is not the right place to check this. It should be in the `if` block below.", "target": "I'm not quite sure here, but may be in this case we should create function call from the beginning (I mean, in raw FIR)?", "id": 98}
{"pred": "<msg>I think we should add `@External` annotation here.", "target": "IMHO an API where there is just a registry of `AdditionalDataProvider<T, Key<T>>` may express the intention in a nicer way. Then, the registry is realized during model building and adding new providers will fail (as a safety check).", "id": 99}
{"pred": "<msg>This file should be removed.", "target": "I'd integrate this in `FirInlineClassDeclarationChecker`.", "id": 100}
{"pred": "<msg>This is not correct. The qualifier is not part of the array.", "target": "I would say that this change might be not enough.\r\nFor example, it's not gonna work in case it has a form of `vararg x: kotlin.Int` or `vararg x: MyTypeAliasToInt`.\r\nMaybe it's worth trying to move this logic to `org.jetbrains.kotlin.fir.resolve.transformers.FirTypeResolveTransformer#transformValueParameter` when the type is already resolved properly and we can just use it without guessing\r\n\r\nBTW, something similar is already happening there at `result.transformVarargTypeToArrayType()`.\r\nLooks like we have similar logic in two different places and I would say it's worth investigating which one should work for all cases.", "id": 101}
{"pred": "<msg>I think we should also add a check that the lock is not already locked.", "target": "Super minor, but do we usually name something like `localLock`? :)", "id": 102}
{"pred": "<msg>This sample is not needed.", "target": "Have you run stdlib code generation after that? It should affect array `filter` extension too. ", "id": 103}
{"pred": "<msg>I think this is not needed anymore.", "target": "This is probably not related to this PR, looks like someone forgot to update the expected data for this test.", "id": 104}
{"pred": "<msg>I think we should use `Map<String, Int>` here.", "target": "I think `@Transient` shouldn't be here, as delegated property is transient automatically? At least it works without it.", "id": 105}
{"pred": "", "target": "Move this file to [compiler/testData/diagnostics/tests/redeclarations](https://github.com/JetBrains/kotlin/tree/4737bb07dfa131d4167ae9fe0966c48ce11268c0/compiler/testData/diagnostics/tests/redeclarations). Rename it to `RedeclaratedVals.kt` (don't use `k2` prefix/suffix for test data since it's used in both frontends).", "id": 106}
{"pred": "<msg>I think we should also check that the name is not empty.", "target": "This error message should also mention the types incompatible `@ObjCName` were inherited from.", "id": 107}
{"pred": "<msg>This is a bit of a hack, but I'm not sure how to make it work.", "target": "> firstOrNull()\r\n\r\n\"singeOrNull\" seems safer option for me", "id": 108}
{"pred": "<msg>I think this is a bug. The `char -> char.toUpperCase()` is not the same as `char -> char.toUpperCase()`.", "target": "revert", "id": 109}
{"pred": "<msg>I think this is not needed.", "target": "It seems like there are missing test when `MixedNamedArgumentsInTheirOwnPosition` is enabled, but the arguments are not in their own positions, and the intention should be disabled\r\n\r\nWith your code, this case will look like `foo(1, <caret>name3 = 3, name2 = 2)`\r\n", "id": 110}
{"pred": "<msg>I think we should use `Char.toLowerCase()` here.", "target": "The only case (`'\u0130'`) where `lowercase.length > 1` the first char (`'i'`) of the `lowercase` is the correct 1-to-1 mapping equivalent.", "id": 111}
{"pred": "<msg>This is a bit of a nitpick, but I think it would be better to have the `?:` on the next line, so that it's clearer what the `?:` is doing.", "target": "if we use gradle 5.1 apis, this can be shortened to `named(Class, String)`. Or we need to keep using this \"old\" api because this case is a backward compatibility case ?", "id": 112}
{"pred": "<msg>I think we should also add this to the `isHidden` method of `TypeAlias`", "target": "This was the bug. declaration.isAssignable was passed in the isHidden position.", "id": 113}
{"pred": "<msg>This is a public API change.", "target": "Seems that `dependencies` is not needed in constructor, it can been calculated from `project`", "id": 114}
{"pred": "<msg>This is a breaking change.", "target": "Please revert this change.", "id": 115}
{"pred": "<msg>I think this should be `this.subList(prefix.size, this.size)`", "target": "Shouldn't this be \"startsWith\", to be consistent with the current implementation for String?", "id": 116}
{"pred": "<msg>I think we should keep this line.", "target": "Why inline flag shouldn't be loaded?", "id": 117}
{"pred": "<msg>This is a bit confusing. I think it would be better to have a `filterIsInstance` method that returns a list of `Field`s.", "target": "Wrong indent?", "id": 118}
{"pred": "<msg>This is a bug fix.", "target": "This change should be in a separate commit, or even better, in a separate PR.", "id": 119}
{"pred": "<msg>I think we should add this to the list of allowed originals.", "target": "Something tells me it might be a good time to introduce a `Set` of origins here", "id": 120}
{"pred": "<msg>I think this should be `open fun initialize(context: CommonBackendContext, loopVariable: IrVariable, forLoopHeader: ForLoopHeader, loopVariableComponents: Map<Int, IrVariable>)`", "target": "Maybe you could move this initialization over to `transform` and change this function to `abstract fun analyze(forLoopHeader: ForLoopHeader)`. That way subclasses don't need to remember to call `super.initialize(...)` and also you only need the `ForLoopHeader` for now in `KonanBCEForLoopBodyTransformer`.", "id": 121}
{"pred": "<msg>This is not a good way to do this. You should be able to do this in the constructor.", "target": "All this code is too nightmarish to leave it. I took source just from `superTypeRef`. It contradicts with old front-end at some point, e.g. reports on `Base` instead of `Base()`, but at this point it looks even more correct.", "id": 122}
{"pred": "<msg>I think this should be `serialVersionUID`", "target": "I still don't get what bad can happen if we set `serialVersionUID = 1L` in all such classes?", "id": 123}
{"pred": "<msg>I think this is a bug.", "target": "I somehow missed it. Thanks!\r\nMinor: there is `SUSPEND_CALL_RESULT_NAME`, which, in fact, I should've used.", "id": 124}
{"pred": "<msg>This is a syntax error.", "target": "This report seems not right either: https://github.com/JetBrains/kotlin/blob/master/compiler/testData/diagnostics/tests/varargs/varargInSetter.kt#L2", "id": 125}
{"pred": "<msg>I think this is a bit confusing. I think it should be `Creates an initializer adapter function that can replace IR expressions of getting constructor parameter value by some other expression.`", "target": "```suggestion\r\n    Creates an initializer adapter function that can replace IR expressions of getting constructor parameter value by some other expression.\r\n```", "id": 126}
{"pred": "<msg>This is a bug.", "target": "This one seems interesting. From the path that passed through `if`, `x is String`. From the synthetic `else`, `x == null` (or `x is Nothing?`). After type `or`ing, now `x is String?`. :\\\r\n\r\nI updated `isAcceptableForSmartcast` accordingly, but seems not good enough. I expect type `or` also needs to drop `Nothing?` at every step?", "id": 127}
{"pred": "<msg>I think this should be `PackageViewDescriptorAccessor`", "target": "The name like `PackageViewDescriptor` seems to be more clear to me, but I don't insist here", "id": 128}
{"pred": "<msg>This is a bit confusing. I think it would be better to have a separate method for this.", "target": "This is effectively a breaking change, so I'm wondering if we should treat:\r\n- `const`\r\n- any kind of primitive + String values for a `val`\r\nas constants and inline them?\r\n\r\nThis ensures existing users do not break.", "id": 129}
{"pred": "<msg>This is a bug fix.", "target": "Minor: I'd leave Other at the end", "id": 130}
{"pred": "<msg>This is a bit weird. Why do we need to return here?", "target": "Put `TODO: Update context receivers`", "id": 131}
{"pred": "<msg>I think this is not needed.", "target": "DECLARATION_NAME light tree positioning strategy works erroneously here. I will fix this problem myself.", "id": 132}
{"pred": "<msg>This is a breaking change.", "target": "Filed https://youtrack.jetbrains.com/issue/KT-44515", "id": 133}
{"pred": "<msg>I think we should throw an error if `transformationInfo` is not an instance of `AnonymousObjectTransformationInfo`.", "target": "maybe smth like `isRecreatesItself`?", "id": 134}
{"pred": "<msg>This is a C++14 thing, so I'm not sure if it's safe to remove the `INAPPLICABLE_CANDIDATE` macro.", "target": "For the record. In addition to `.`, this is another place where the diagnostic positioning matters: it should be array access.", "id": 135}
{"pred": "", "target": "By default this conversion will lead to red code, because currently it is disabled\r\n\r\nPlease enable it with this\r\n\r\n```suggestion\r\n// COMPILER_ARGUMENTS: -XXLanguage:+SuspendConversion\r\nfun foo(a: suspend () -> Unit) {}\r\n```", "id": 136}
{"pred": "<msg>I think this is a bit of a misnomer. It's not a binary boolean expression. It's a binary expression that is not overridden.", "target": "I've created [KT-55096](https://youtrack.jetbrains.com/issue/KT-55096) to track this problem", "id": 137}
{"pred": "<msg>I think we can remove this class.", "target": "Also it's better to inherit from `FirVariableAssignmentChecker` alias", "id": 138}
{"pred": "<msg>This is not needed anymore", "target": "I need atomicfu klib as the compile dependency for the plugin tests. This dependency is provided in the [atomicfuClasspath](https://github.com/JetBrains/kotlin/blob/19610be7c35dcf39b3db4a076bad6891c30fc043/plugins/atomicfu/atomicfu-compiler/build.gradle.kts#L48) - the atomicfu-js version `0.14.3-1.4-M1`, that is built with `1.4-M1`. The problem here is that kotlin abi version  of this dependency is 1.4.0 while the CURRENT KotlinAbiVersion is 1.4.1, so here I get mismatch and the dependency is not used.\r\n\r\nHow is the abi version provided for the library?", "id": 139}
{"pred": "<msg>I think we should use `TokenSet` here.", "target": "As I can see, all these functions return a child, not a set of children. Please rename them accordingly.", "id": 140}
{"pred": "<msg>I think we should add this to the `@SharedImmutable` error message as well.", "target": "\"Top level\" is redundant here (e.g. `companion object`).", "id": 141}
{"pred": "<msg>This is a bit of a hack, but I don't think it's a problem.", "target": "Filed https://youtrack.jetbrains.com/issue/KT-44511", "id": 142}
{"pred": "<msg>I think this should be `UNSAFE_CALL`", "target": "For the record, this is also `SMARTCAST_IMPOSSIBLE`.", "id": 143}
{"pred": "<msg>I think this should be `receiverExpression`", "target": "I suspect either `receiverExpression` or `lhs` isn't needed here", "id": 144}
{"pred": "<msg>This is a test that should be inlined.", "target": "To be honest, no idea yet.\r\n\r\nhttps://github.com/JetBrains/kotlin/blob/master/compiler/testData/diagnostics/tests/regressions/kt557.kt#L11\r\n\r\nAt DOT operator, the receiver has `TYPE_MISMATCH`, and the call is reported as `UNRESOLVED_REFERENCE_WRONG_RECEIVER` (well, because type mismatches, hm). We don't have a type checker that reports `TYPE_MISMATCH`, don't we?", "id": 145}
{"pred": "<msg>I think this is a bit confusing. I think we should rename this to `dispatchReceiver` and the `this` receiver to `thisReceiver`", "target": "I realized `irClass.thisReceiver` is returned as a default-ish dispatch receiver at the end, so we may just skip here if `function is IrConstructor` in general. But, it's better to return early I think.", "id": 146}
{"pred": "<msg>This is a bug fix.", "target": "OI/NI behave differently: https://github.com/JetBrains/kotlin/blob/master/compiler/testData/diagnostics/tests/resolve/invoke/errors/unsafeCallWithInvoke.kt#L9\r\n\r\nAssuming NI is default in FIR, I think we should report `UNSAFE_IMPLICIT_INVOKE_CALL` here?", "id": 147}
{"pred": "<msg>This is a bit weird. Why not just pass the `IrProviders` object to the `DeclarationStubGenerator` constructor?", "target": "Move to line 47?", "id": 148}
{"pred": "<msg>I think this should be `ProxlyExhaustive`", "target": "Maybe add a comment for this one too, something like,\r\n```\r\n/**\r\n * This value is used if the subject has type other than `Nothing`, in which case it's literally exhaustive\r\n * only if type's possible cases are properly covered.\r\n */\r\n```", "id": 149}
{"pred": "<e0>}", "target": "Just for the record, many errors in this file should be rather `UNRESOLVED_REFERENCE_WRONG_RECEIVER`: https://github.com/JetBrains/kotlin/blob/master/compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver.kt#L10", "id": 150}
{"pred": "<msg>I think we should add the new FQN to the existing `io.reactivex.rxjava3.annotations.Nullable`", "target": "I'm not sure if it's possible to use trailing commas here? As in I'm not sure what kotlin language level the compiler code targets", "id": 151}
{"pred": "<msg>This is a bit of a hack, but I don't think it's a good idea to have a try/catch in a function that throws an exception.", "target": "Should be smartcast", "id": 152}